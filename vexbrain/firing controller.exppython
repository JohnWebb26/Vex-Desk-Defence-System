{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nmotor_y = Motor(Ports.PORT5, True)\nmotor_x = Motor(Ports.PORT3, True)\nfiring_motor = Motor(Ports.PORT1, True)\ncontroller = Controller()\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n\n# Initialize random seed \ninitializeRandomSeed()\n\n#endregion VEXcode Generated Robot Configuration\n\n\n# Set stopping modes\nmotor_x.set_stopping(BRAKE)\nmotor_y.set_stopping(BRAKE)\nfiring_motor.set_stopping(HOLD)\n\nmotor_x.set_position(0, DEGREES)\nmotor_y.set_position(0, DEGREES)\n\n# Rotation boundaries\nX_MIN = -90\nX_MAX = 90\nY_MIN = -40\nY_MAX = 35\n\ndef print_pos():\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1,1)\n    brain.screen.print(\"X: \"+  str(motor_x.position(DEGREES)))\n    brain.screen.next_row()\n    brain.screen.print(\"Y: \" + str(motor_y.position(DEGREES)))\n\ndef aim_control():\n    # Get current positions\n    current_x = motor_x.position(DEGREES)\n    current_y = motor_y.position(DEGREES)\n\n    # Joystick values\n    x_input = controller.axis4.position() * 0.05\n    y_input = controller.axis2.position() * 0.05\n\n    # X-axis control with limits\n    if (x_input > 0 and current_x < X_MAX) or (x_input < 0 and current_x > X_MIN):\n        motor_x.spin(FORWARD, x_input, PERCENT)\n        print_pos()\n    else:\n        motor_x.stop()\n\n    # Y-axis control with limits\n    if (y_input > 0 and current_y < Y_MAX) or (y_input < 0 and current_y > Y_MIN):\n        motor_y.spin(FORWARD, y_input, PERCENT)\n        print_pos()\n    else:\n        motor_y.stop()\n        \ndef fire_control():\n    # If A is held, spin the firing motor slowly\n    if controller.buttonA.pressing():\n        firing_motor.spin(FORWARD, 20, PERCENT)  # Adjust speed here\n    else:\n        firing_motor.stop()  # Stops firing motor when A is released\n\n# Main loop\nwhile True:\n    aim_control()\n    fire_control()\n    wait(0.02, SECONDS)\n","textLanguage":"python","robotConfig":[{"port":[5],"name":"motor_y","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"motor_x","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1],"name":"firing_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22}],"slot":0,"platform":"EXP","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"4.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}