{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nx_axis_motor = Motor(Ports.PORT3, True)\ny_axis_motor = Motor(Ports.PORT5, True)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n\n# Initialize random seed \ninitializeRandomSeed()\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode EXP Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nimport time \n\n# Set max values \nMAX_RIGHT = 90\nMAX_LEFT = 90\nMAX_UP = 34\nMAX_DOWN = 34\n\ndigital_x_position = 0\ndigital_y_position = 0\n\ndef bprint(value):\n    '''A function to print to the screen to clean up clearing the screen and printing to the screen and shortens the line length'''\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1,1)\n    brain.screen.print(value)\n\ndef move_right(spin_amount):\n    '''Moves the turret in the right direction but doesn not allow it to pass through the max vlaue for the right position which is defined earlier on '''\n    current_position = x_axis_motor.position(DEGREES)\n    if( current_position + spin_amount > MAX_RIGHT):\n        spin_amount -= (current_position + spin_amount) - MAX_RIGHT\n    x_axis_motor.spin_for(FORWARD,spin_amount+2.2,DEGREES)\n\ndef move_left(spin_amount):\n    current_position = x_axis_motor.position(DEGREES)\n    if(spin_amount + -current_position  > MAX_LEFT):\n        spin_amount -= (-current_position+spin_amount)- MAX_LEFT\n    x_axis_motor.spin_for(REVERSE,(spin_amount+2),DEGREES)\n\ndef move_up(spin_amount):\n    current_position = y_axis_motor.position(DEGREES)\n    if(current_position + spin_amount > MAX_UP):\n        spin_amount -= (current_position+spin_amount)-MAX_UP\n    y_axis_motor.spin_for(FORWARD,spin_amount,DEGREES)\n    bprint(y_axis_motor.position(DEGREES))\n\ndef move_down(spin_amount):\n    current_position = y_axis_motor.position(DEGREES)\n    if(spin_amount + -current_position  > MAX_DOWN):\n        spin_amount -= (-current_position+spin_amount)- MAX_DOWN\n    y_axis_motor.spin_for(REVERSE,(spin_amount+2),DEGREES)\n\n\n# slow the motors velocity down\nx_axis_motor.set_velocity(5,PERCENT)\ny_axis_motor.set_velocity(5,PERCENT)\n\n# add the main while loop here","textLanguage":"python","robotConfig":[{"port":[3],"name":"x_axis_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[5],"name":"y_axis_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"}}],"slot":0,"platform":"EXP","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false}